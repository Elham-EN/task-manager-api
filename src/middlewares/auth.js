//This function is going to run between the request coming to the
//server and the route hanlder actually running and it has access
//to same information as the route handler.
//app.use() Register a middleware function to express function

/**
 * What the auth function is going to do to make sure the given user
 * is authenticated?
 * The whole authentication process starts with the client taking that
 * authentication token that they get from signing up or loggin in and
 * and providing with request they are trying to perform,
 *
 * User must be authenticate for the remaining request method function that
 * include the auth middleware function. We must set up a a request header,
 * providng additionnal information to the server. When we work with headers
 * we can provide them as part of the request, so sending them from the client
 * to the server. And we can also have server send headers back as part of the
 * response to the requester (client). We are providing authentication token
 * to the server.
 *
 * The HTTP Authorization request header can be used to provide credentials that
 * authenticate a user agent with a server, allowing access to a protected resource.
 *                    Authorization: Bearer <token>
 * Bearer authentication (also called token authentication) is an HTTP authentication
 * scheme that involves security tokens called bearer tokens. The name “Bearer(owner)
 * authentication” can be understood as “give access to the bearer(owner) of this token.”
 * The bearer token is a cryptic string, usually generated by the server in response
 * to a login request. The client must send this token in the Authorization header when
 * making requests to protected resources:
 * More info: https://swagger.io/docs/specification/authentication/bearer-authentication/
 *            https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization
 */

const jwt = require("jsonwebtoken");
const dbFunction = require("../db/mongoose");

const authFunction = async (req, res, next) => {
  try {
    //To get token value from the request header's key 'Authorization'
    //We need to remove the 'Bearer' portion with space
    const token = req.header("Authorization").replace("Bearer ", "");
    //Make sure token is valid, which is created by the server and
    //has not been expired. Compare the token with your private key
    //And it return the decoded _id of the user
    const decoded = jwt.verify(token, process.env.JWT_PRIVATE_KEY);
    const requestObj = {
      _id: decoded._id,
      requestInfo: "AUTH_USER",
      token: token,
    };
    const user = await dbFunction(requestObj);
    if (!user) throw new Error();
    //And give route handler access to the user we fetched from
    //the database
    req.token = token;
    req.user = user;
    //This make sure the route handler run since the user has proven
    //they are autheticated.
    next();
  } catch (error) {
    //if authentication process failed, then send error msg
    res.status(401).send({ error: "Please authenticate first" });
  }
};

module.exports = authFunction;
